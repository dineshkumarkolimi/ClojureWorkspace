cmdhistory=["(print \\"hello world\\")" "(defn hello-world []\\n   (println \\"Hello World\\"))\\n(hello-world)" "(defn addNum [] \\n ( (var x 10)\\n   (var y 20)\\n   (var sum (+ x y))\\n   (print (str \\"the sum of \\" x y \\"is\\" sum))\\n )\\n)" "(defn addNum [] \\n ( (def x 10)\\n   (def y 20)\\n   (def sum (+ x y))\\n   (print (str \\"the sum of \\" x y \\"is\\" sum))\\n )\\n)" "(defn addNum [] \\n ( (def x 10)\\n   (def y 20)\\n   (def sum (+ x y))\\n   (println x)\\n   (println y)\\n   (println sum)\\n   (println (str \\"the sum of \\" x y \\"is\\" sum))\\n )\\n)" "> (defn addNum [] \\n    ( (def x 10)\\n      (def y 20)\\n      (def sum (+ x y))\\n      (println x)\\n      (println y)\\n      (println sum)\\n      (println (str \\"the sum of \\" x y \\"is\\" sum))\\n    )\\n   )\\n(addNum)" "(defn addNum [] \\n   (def x 10)\\n   (def y 20)\\n   (def sum (+ x y))\\n   (println x)\\n   (println y)\\n   (println sum)\\n   (println (str \\"the sum of \\" x y \\"is\\" sum)))\\n(addNum)" "(defn addNum [] \\n   (def x 10)\\n   (def y 20)\\n   (def sum (+ x y))\\n   (println x)\\n   (println y)\\n   (println sum)\\n   (println (str \\"the sum of \\", x, \\" \\", y, \\" is \\", sum)))\\n(addNum)" "(defn addNum [] \\n   (def x 10)\\n   (def y 20)\\n   (def sum (+ x y))\\n   (println x)\\n   (println y)\\n   (println sum)\\n   (println (str \\"the sum of \\", x, \\" + \\", y, \\" is \\", sum)))\\n(addNum)" "(defn addNum [] \\n   (def x 10)\\n   (def y 20)\\n   (def sum (+ x y))\\n   (println x)\\n   (println y)\\n   (println sum)\\n   (println (str \\"the sum of \\", x, \\" & \\", y, \\" is \\", sum)))\\n(addNum)" "(defn whileExmple [] \\n  (def x (atom 1))\\n  (while (< @x 5)\\n    (do\\n      (println x)\\n      (swap\! x inc))))\\n\\n(whileExmple)" "(defn whileExmple [] \\n     (def x (atom 1))\\n     (while (< @x 5)\\n       (do\\n         (println @x)\\n         (swap\! x inc))))\\n   \\n   (whileExmple)" "(defn whileExmple [] \\n  (def x (atom 1))\\n  (while (< @x 5)\\n    (do\\n      (println @x)\\n      (swap x inc))))\\n\\n(whileExmple)" "(defn whileExmple [] \\n  (def x (atom 1))\\n  (while (< @x 5)\\n    (do\\n      (println @x)\\n      (swap\! x inc))))\\n\\n(whileExmple)" "(def doSeqExmpl []\\n  (doseq [n [1, 2, 3, 4]]\\n    (println n)))\\n(doSeqExmpl)" "(def doSeqExmpl []\\n  (doseq [n [1 2 3 4]]\\n    (println n)))\\n\\n(doSeqExmpl)" "(def doSeqExmpl []\\n  (doseq [n [0 1 2 3 4]]\\n    (println n)))\\n\\n(doSeqExmpl)" "(defn doSeqExmpl []\\n  (doseq [n [0 1 2 3 4]]\\n    (println n)))\\n\\n(doSeqExmpl)" "(defn doTimesExmpl []\\n  (dotimes [n 5]\\n    (println n)))\\n\\n(doTimesExmpl)" "(defn loopExmpl []\\n  (loop [n 10]\\n    (when (> n 1)\\n      (println n)\\n      (recur (- n 2)))))\\n(loopExmpl)" "(defn ifExmpl []\\n  (if (\= 2 2)\\n    (println \\"these are equal\\")\\n    (println \\"these are not equal\\")))\\n(ifExmpl)" "(def caseExmpl []\\n  (def n 5)\\n  (case n 5 (println \\"n is 5\\")\\n    10 (println \\"n is 10\\")))\\n(caseExmpl)" "(defn caseExmpl []\\n  (def n 5)\\n  (case n 5 (println \\"n is 5\\")\\n    10 (println \\"n is 10\\")\\n    (println \\"neither 5 nor 10\\")))\\n(caseExmpl)" "(defn condExmpl []\\n  (def x 5)\\n  (cond\\n    \= x 5 (println \\"this is 5\\")\\n    \= x 10 (println \\"this is 10\\")\\n    \:else (println \\"this is not 5 nor 10\\")))\\n(condExmpl)" "(defn condExmpl []\\n  (def x 5)\\n  (cond\\n    (\= x 5) (println \\"this is 5\\")\\n    (\= x 10) (println \\"this is 10\\")\\n    \:else (println \\"this is not 5 nor 10\\")))\\n(condExmpl)" "(defn anonymousFun []\\n  ((fn [x] (* x 2)) 2))\\n(anonymousFun)" "(defn anonymousFun []\\n  ((fn [x] (* x 2)) ))\\n(anonymousFun)" "(defn anonymousFun []\\n  ((fn [x] (* x 2)) 6))\\n(anonymousFun)" "(defn multiArgExample [x y]\\n  (println (* 2 x y)))\\n\\n(multiArgExample) 2 4" "(defn multiArgExample [x y]\\n  (println (* 2 x y)))\\n\\n(multiArgExample 2 4)" "(defn multiArgExample [x y]\\n  (println (* 2 (+ x y))))\\n\\n(multiArgExample 2 4)" "(defn vardiacFunExmpl [method & others]\\n  (println method (clojure.string/join \\" \\" others)))\\n(vardiacFunExmpl \\"HI\\" \\"am\\" \\"Dineshkumar\\" \\"Babu\\")" "(defn vardiacFunExmpl [method & others]\\n  (str method (clojure.string/join \\" \\" others)))\\n(vardiacFunExmpl \\"HI\\" \\"am\\" \\"Dineshkumar\\" \\"Babu\\")" "(defn variadicFunExmpl [method & others]\\n  (str method (clojure.string/join \\" \\" others)))\\n(variadicFunExmpl \\"HI\\" \\"am\\" \\"Dineshkumar\\" \\"Babu\\")" "(HOFexmpl even? (range 1 10))" "(range even? (range 1 10))" "(filter even? (range 1 10))" "(defn loopExmpl []\\n  (loop [n 10]\\n    (when (> n 1)\\n      (println n)\\n      (recur (- n 2)))))\\n(loopExmpl)" "clear()" "clear" "(defn readFile []\\n  (def str  (slurp \\"./cust.txt\\"))\\n  (println str))\\n(readFile)" "(defn readFile []\\n  (def s  (slurp \\"./cust.txt\\"))\\n  (println s))\\n(readFile)" "(defn readFile []\\n  (def s  (slurp \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\"))\\n  (println s))\\n(readFile)" "(defn readFileLine []\\n  (with-open [r (clojure.java.io/reader \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")]\\n    (reduce conj [] (line-seq r))))\\n(readFileLine)" "(defn readFileLine []\\n  (with-open [r (clojure.java.io/reader \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/product.txt\\")]\\n    (reduce conj [] (line-seq r))))\\n(readFileLine)" "(defn readFileLine []\\n  (with-open [r (clojure.java.io/reader \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")]\\n    (reduce conj [] (line-seq r))))\\n(readFileLine)" "(defn writeString []\\n  (spit \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\" \\n        \\"4|Kolimi Dineshkumar|1800 Montreal|5149675445\\"))\\n(writeString)" "(defn writeStringByLine []\\n  (with-open [w (clojure.java.io/writer \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\" \:append true)]\\n    (.write w (str \\"5|Kolimi Dinesh|1800 Montreal|5149675445\\"))))\\n(writeStringByLIne)" "(defn writeStringByLine []\\n  (with-open [w (clojure.java.io/writer \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\" \:append true)]\\n    (.write w (str \\"5|Kolimi Dinesh|1800 Montreal|5149675445\\"))))\\n(writeStringByLine)" "(defn writeStringByLine []\\n  (with-open [w (clojure.java.io/writer \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\" \:append true)]\\n    (.write w (str \\"5|Kolimi Dinesh|1800 Montreal|\\" \\"5149675445\\"))))\\n(writeStringByLine)" "(defn writeStringByLine []\\n  (with-open [w (clojure.java.io/writer \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\" append true)]\\n    (.write w (str \\"5|Kolimi Dinesh|1800 Montreal|5149675445\\"))))\\n(writeStringByLine)" "(defn writeStringByLine []\\n  (with-open [w (clojure.java.io/writer \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\" \:append true)]\\n    (.write w (str \\"5|Kolimi Dinesh|1800 Montreal|5149675445\\"))))\\n(writeStringByLine)" "(defn checkFile []\\n  (println (.exits (clojure.java.io/file \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\" ))))\\n(checkFile)" "(defn writeString []\\n  (spit \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\" \\n        \\"4|Kolimi Dineshkumar|1800 Montreal|5149675445\\"))\\n(writeString)" "(defn writeStringByLine []\\n  (with-open [w (clojure.java.io/writer \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\" \:append true)]\\n    (.write w (str \\"5|Kolimi Dinesh|1800 Montreal|5149675445\\"))))\\n(writeStringByLine)" "(defn checkFile []\\n  (println (.exits (clojure.java.io/file \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\" ))))\\n(checkFile)" "(defn checkFile []\\n  (println (.exits (clojure.java.io/file \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\"))))\\n(checkFile)" "(defn writeStringByLine []\\n  (with-open [w (clojure.java.io/writer \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\" \:append true)]\\n    (.write w (str \\"\\\\n5|Kolimi Dinesh|1800 Montreal|5149675445\\"))))\\n(writeStringByLine)" "(defn writeStringByLine []\\n  (with-open [w (clojure.java.io/writer \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\" \:append true)]\\n    (.write w (str \\"5|Kolimi Dinesh|1800 Montreal|5149675445\\"))))\\n(writeStringByLine)" "(defn writeStringByLine []\\n  (with-open [w (clojure.java.io/writer \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\" \:append true)]\\n    (.write w (str \\"\\\\n5|Kolimi Dinesh|1800 Montreal|5149675445\\"))))\\n(writeStringByLine)" "(defn checkFile []\\n  (println (.exists (clojure.java.io/file \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\"))))\\n(checkFile)" "(def stringMethods []\\n  ;general form of a string\\n  (println \\"I am dinesh\\")\\n  \\n  ;concatenation of a string by 'str'\\n  (println (str \\"I am \\" \\"dinesh\\"))\\n  \\n  ;formatting of any string by %s or %t or %06d\\n  (println (format \\"I am %s\\" \\"dinesh\\"))\\n  (println (format \\"padding with zeroes ahead %06d\\" 1234))\\n  \\n  ;to count size of string\\n  (println(count \\"I am dinesh\\"))\\n  \\n  ;to access substring of a string 'subs'\\n  (println (subs \\"i am dinesh\\" 5 10))\\n  \\n  ;To compare two strings and returns '+' or '0' or '-' \\n  ;if lesser(x<y) or equal(z\=y) or greater (x>y)\\n  (println (compare \\"dinesh\\" \\"Dinesh\\"))\\n  \\n  ;to convert a string to lowercase or uppercase\\n  (println (lower-case \\"DINESH Kumar\\"))\\n  (println (upper-case \\"dinesh Kumar\\"))\\n  \\n  ;to join a list or vector or any other collection\\n  (println (clojure.string/join \\",\\" [0 1 2 4]))\\n  \\n  ;To split based on a regular expression or based on \\\\n or \\\\rn\\n  (println (clojure.string/split \\"I am dinesh\\" \#\\" \\"))\\n  (println (clojure.string/split-lines \\"i am \\\\n dinesh\\" ))\\n  \\n  ;to reverse a string\\n  (println (reverse \\"dinesh\\"))\\n  \\n  ;to replace a string with another\\n  (println (clojure.string/replace \\"i am dinesh\\" \#\\"dinesh\\" \\"kumar\\"))\\n  \\n  ;To trim complete blank spaces or to trim left or right of string\\n  (println (clojure.string/trim \\"  i am dinesh \\"))\\n  (println (clojure.string/triml \\" i am dinesh  \\"))\\n  (println (clojure.string/trimr \\"  i am dinesh   \\")))\\n\\n(stringMethods)" "(defn stringMethods []\\n  ;general form of a string\\n  (println \\"I am dinesh\\")\\n  \\n  ;concatenation of a string by 'str'\\n  (println (str \\"I am \\" \\"dinesh\\"))\\n  \\n  ;formatting of any string by %s or %t or %06d\\n  (println (format \\"I am %s\\" \\"dinesh\\"))\\n  (println (format \\"padding with zeroes ahead %06d\\" 1234))\\n  \\n  ;to count size of string\\n  (println(count \\"I am dinesh\\"))\\n  \\n  ;to access substring of a string 'subs'\\n  (println (subs \\"i am dinesh\\" 5 10))\\n  \\n  ;To compare two strings and returns '+' or '0' or '-' \\n  ;if lesser(x<y) or equal(z\=y) or greater (x>y)\\n  (println (compare \\"dinesh\\" \\"Dinesh\\"))\\n  \\n  ;to convert a string to lowercase or uppercase\\n  (println (lower-case \\"DINESH Kumar\\"))\\n  (println (upper-case \\"dinesh Kumar\\"))\\n  \\n  ;to join a list or vector or any other collection\\n  (println (clojure.string/join \\",\\" [0 1 2 4]))\\n  \\n  ;To split based on a regular expression or based on \\\\n or \\\\rn\\n  (println (clojure.string/split \\"I am dinesh\\" \#\\" \\"))\\n  (println (clojure.string/split-lines \\"i am \\\\n dinesh\\" ))\\n  \\n  ;to reverse a string\\n  (println (reverse \\"dinesh\\"))\\n  \\n  ;to replace a string with another\\n  (println (clojure.string/replace \\"i am dinesh\\" \#\\"dinesh\\" \\"kumar\\"))\\n  \\n  ;To trim complete blank spaces or to trim left or right of string\\n  (println (clojure.string/trim \\"  i am dinesh \\"))\\n  (println (clojure.string/triml \\" i am dinesh  \\"))\\n  (println (clojure.string/trimr \\"  i am dinesh   \\")))\\n\\n(stringMethods)" "(defn stringMethods []\\n  ;general form of a string\\n  (println \\"I am dinesh\\")\\n  \\n  ;concatenation of a string by 'str'\\n  (println (str \\"I am \\" \\"dinesh\\"))\\n  \\n  ;formatting of any string by %s or %t or %06d\\n  (println (format \\"I am %s\\" \\"dinesh\\"))\\n  (println (format \\"padding with zeroes ahead %06d\\" 1234))\\n  \\n  ;to count size of string\\n  (println(count \\"I am dinesh\\"))\\n  \\n  ;to access substring of a string 'subs'\\n  (println (subs \\"i am dinesh\\" 5 10))\\n  \\n  ;To compare two strings and returns '+' or '0' or '-' \\n  ;if lesser(x<y) or equal(z\=y) or greater (x>y)\\n  (println (compare \\"dinesh\\" \\"Dinesh\\"))\\n  \\n  ;to convert a string to lowercase or uppercase\\n  (println (clojure.string/lower-case \\"DINESH Kumar\\"))\\n  (println (clojure.string/upper-case \\"dinesh Kumar\\"))\\n  \\n  ;to join a list or vector or any other collection\\n  (println (clojure.string/join \\",\\" [0 1 2 4]))\\n  \\n  ;To split based on a regular expression or based on \\\\n or \\\\rn\\n  (println (clojure.string/split \\"I am dinesh\\" \#\\" \\"))\\n  (println (clojure.string/split-lines \\"i am \\\\n dinesh\\" ))\\n  \\n  ;to reverse a string\\n  (println (reverse \\"dinesh\\"))\\n  \\n  ;to replace a string with another\\n  (println (clojure.string/replace \\"i am dinesh\\" \#\\"dinesh\\" \\"kumar\\"))\\n  \\n  ;To trim complete blank spaces or to trim left or right of string\\n  (println (clojure.string/trim \\"  i am dinesh \\"))\\n  (println (clojure.string/triml \\" i am dinesh  \\"))\\n  (println (clojure.string/trimr \\"  i am dinesh   \\")))\\n\\n(stringMethods)" "(defn listMethods []\\n  ;basic list\\n  (println (list 1 2 3 4))\\n  \\n  ;to append one list to another 'list* new_list old_list'\\n  (println (list* (1 2) (3 4)))\\n  \\n  ;to return first item of list\\n  (println (first (list 1 2 3 4)))\\n  \\n  ;to return nth item of list\\n  (println (nth (list 1 2 3 4) 3))\\n  \\n  ;to add element to the begining of list\\n  (println (cons 0 (list 1 2 3)))\\n  \\n  ;to add elements and they are present at the end \\n  (println (conj (list 1 2 3) 4 5 ))\\n  \\n  ;to return rest of the elements except the first item\\n  (println (rest (list 1 2 3 4 5))))\\n\\n(listMethods)" "(defn listMethods []\\n  ;basic list\\n  (println (list 1 2 3 4))\\n  \\n  ;to append one list to another 'list* new_list old_list'\\n  (println (list* 1 2 (3 4)))\\n  \\n  ;to return first item of list\\n  (println (first (list 1 2 3 4)))\\n  \\n  ;to return nth item of list\\n  (println (nth (list 1 2 3 4) 3))\\n  \\n  ;to add element to the begining of list\\n  (println (cons 0 (list 1 2 3)))\\n  \\n  ;to add elements and they are present at the end \\n  (println (conj (list 1 2 3) 4 5 ))\\n  \\n  ;to return rest of the elements except the first item\\n  (println (rest (list 1 2 3 4 5))))\\n\\n(listMethods)" "(defn listMethods []\\n  ;basic list\\n  (println (list 1 2 3 4))\\n  \\n  ;to append one list to another 'list* new_list old_list'\\n  (println (list* [1 2] [3 4]))\\n  \\n  ;to return first item of list\\n  (println (first (list 1 2 3 4)))\\n  \\n  ;to return nth item of list\\n  (println (nth (list 1 2 3 4) 3))\\n  \\n  ;to add element to the begining of list\\n  (println (cons 0 (list 1 2 3)))\\n  \\n  ;to add elements and they are present at the end \\n  (println (conj (list 1 2 3) 4 5 ))\\n  \\n  ;to return rest of the elements except the first item\\n  (println (rest (list 1 2 3 4 5))))\\n\\n(listMethods)" "(defn listMethods []\\n  ;basic list\\n  (println (list 1 2 3 4))\\n  \\n  ;to append one list to another 'list* new_list old_list'\\n  (println (list* [1 2] [3 4]))\\n  \\n  ;to return first item of list\\n  (println (first (list 1 2 3 4)))\\n  \\n  ;to return nth item of list\\n  (println (nth (list 1 2 3 4) 3))\\n  \\n  ;to add element to the begining of list\\n  (println (cons 0 0 (list 1 2 3)))\\n  \\n  ;to add elements and they are present at the end \\n  (println (conj (list 1 2 3) 4 5 ))\\n  \\n  ;to return rest of the elements except the first item\\n  (println (rest (list 1 2 3 4 5))))\\n\\n(listMethods)" "(defn listMethods []\\n  ;basic list\\n  (println (list 1 2 3 4))\\n  \\n  ;to append one list to another 'list* new_list old_list'\\n  (println (list* [1 2] [3 4]))\\n  (println (list* 1 [2 3 4]))\\n  \\n  ;to return first item of list\\n  (println (first (list 1 2 3 4)))\\n  \\n  ;to return nth item of list\\n  (println (nth (list 1 2 3 4) 3))\\n  \\n  ;to add element to the begining of list\\n  (println (cons 0 (list 1 2 3)))\\n  \\n  ;to add elements and they are present at the end \\n  (println (conj (list 1 2 3) 4 5 ))\\n  \\n  ;to return rest of the elements except the first item\\n  (println (rest (list 1 2 3 4 5))))\\n\\n(listMethods)" "(defn setMethods []\\n  ;general set creation and set removes duplicates \\n  (println (set '(1 2 3 4 1)))\\n  \\n  ;sorting sets is very easy 'sorted-sets'\\n  (println (sorted-sets 1 1 3 2 7 6 5 5))\\n  \\n  ;to return a element at a specific index \\n  (println (get (set '(1 1 2 3 4 5) 2)))\\n  \\n  ;to find if a element is present we use 'contains ?'\\n  (println (contains? (set '(1 2 3 4 5) 3)))\\n  \\n  ;to append an element to the set use 'conj'\\n  (println (conj (set '(1 2 3 4) 5 6)))\\n  \\n  ;to remove an element from a set use 'disj'\\n  (println (disj (set '(1 2 3 4 5 6) 6)))\\n  \\n  ;to add two sets use 'union'\\n  (println (sets/union \#{1 2} \#{3 4}))\\n  \\n  ;to return a set from first set which is different form second set 'difference'\\n  (println (set/difference \#{1 2} \#{2 3}))\\n  \\n  ;to return intersection of two sets use 'intersect'\\n  (println (set/intersection \#{1 2} \#{2 3}))\\n  \\n  ;to get subset or super set\\n  (println (set/subset \#{1 2} \#{1 2 3}))\\n  (println (set/superset \#{1 2 3} \#{1 2})))\\n(setMethods)" "(defn setMethods []\\n  ;general set creation and set removes duplicates \\n  (println (set '(1 2 3 4 1)))\\n  \\n  ;sorting sets is very easy 'sorted-sets'\\n  (println (sorted-set 1 1 3 2 7 6 5 5))\\n  \\n  ;to return a element at a specific index \\n  (println (get (set '(1 1 2 3 4 5) 2)))\\n  \\n  ;to find if a element is present we use 'contains ?'\\n  (println (contains? (set '(1 2 3 4 5) 3)))\\n  \\n  ;to append an element to the set use 'conj'\\n  (println (conj (set '(1 2 3 4) 5 6)))\\n  \\n  ;to remove an element from a set use 'disj'\\n  (println (disj (set '(1 2 3 4 5 6) 6)))\\n  \\n  ;to add two sets use 'union'\\n  (println (sets/union \#{1 2} \#{3 4}))\\n  \\n  ;to return a set from first set which is different form second set 'difference'\\n  (println (set/difference \#{1 2} \#{2 3}))\\n  \\n  ;to return intersection of two sets use 'intersect'\\n  (println (set/intersection \#{1 2} \#{2 3}))\\n  \\n  ;to get subset or super set\\n  (println (set/subset \#{1 2} \#{1 2 3}))\\n  (println (set/superset \#{1 2 3} \#{1 2})))\\n(setMethods)" "(defn setMethods []\\n  ;general set creation and set removes duplicates \\n  (println (set '(1 2 3 4 1)))\\n  \\n  ;sorting sets is very easy 'sorted-sets'\\n  (println (sorted-set 1 1 3 2 7 6 5 5))\\n  \\n  ;to return a element at a specific index \\n  (println (get (set '(1 1 2 3 4 5) 2)))\\n  \\n  ;to find if a element is present we use 'contains ?'\\n  (println (contains? (set '(1 2 3 4 5) 3)))\\n  \\n  ;to append an element to the set use 'conj'\\n  (println (conj (set '(1 2 3 4) 5 6)))\\n  \\n  ;to remove an element from a set use 'disj'\\n  (println (disj (set '(1 2 3 4 5 6) 6)))\\n  \\n  ;to add two sets use 'union'\\n  (println (set/union \#{1 2} \#{3 4}))\\n  \\n  ;to return a set from first set which is different form second set 'difference'\\n  (println (set/difference \#{1 2} \#{2 3}))\\n  \\n  ;to return intersection of two sets use 'intersect'\\n  (println (set/intersection \#{1 2} \#{2 3}))\\n  \\n  ;to get subset or super set\\n  (println (set/subset \#{1 2} \#{1 2 3}))\\n  (println (set/superset \#{1 2 3} \#{1 2})))\\n(setMethods)" "(defn setMethods []\\n  ;general set creation and set removes duplicates \\n  (println (set '(1 2 3 4 1)))\\n  \\n  ;sorting sets is very easy 'sorted-sets'\\n  (println (sorted-set 1 1 3 2 7 6 5 5))\\n  \\n  ;to return a element at a specific index \\n  (println (get (set '(1 1 2 3 4 5) 2)))\\n  \\n  ;to find if a element is present we use 'contains ?'\\n  (println (contains? (set '(1 2 3 4 5) 3)))\\n  \\n  ;to append an element to the set use 'conj'\\n  (println (conj (set '(1 2 3 4) 5 6)))\\n  \\n  ;to remove an element from a set use 'disj'\\n  (println (disj (set '(1 2 3 4 5 6) 6)))\\n  \\n  ;to add two sets use 'union'\\n  (println (set/union \#{1 2} \#{3 4}))\\n  \\n  ;to return a set from first set which is different form second set 'difference'\\n  (println (set/difference \#{1 2} \#{2 3}))\\n  \\n  ;to return intersection of two sets use 'intersect'\\n  (println (set/intersection \#{1 2} \#{2 3}))\\n  \\n  ;to get subset or super set\\n  (println (set/subset \#{1 2} \#{1 2 3}))\\n  (println (set/superset \#{1 2 3} \#{1 2})))\\n\\n(setMethods)" "(\:require [clojure.set \:as set])\\n\\n(defn setMethods []\\n  ;general set creation and set removes duplicates \\n  (println (set '(1 2 3 4 1)))\\n  \\n  ;sorting sets is very easy 'sorted-sets'\\n  (println (sorted-set 1 1 3 2 7 6 5 5))\\n  \\n  ;to return a element at a specific index \\n  (println (get (set '(1 1 2 3 4 5) 2)))\\n  \\n  ;to find if a element is present we use 'contains ?'\\n  (println (contains? (set '(1 2 3 4 5) 3)))\\n  \\n  ;to append an element to the set use 'conj'\\n  (println (conj (set '(1 2 3 4) 5 6)))\\n  \\n  ;to remove an element from a set use 'disj'\\n  (println (disj (set '(1 2 3 4 5 6) 6)))\\n  \\n  ;to add two sets use 'union'\\n  (println (set/union \#{1 2} \#{3 4}))\\n  \\n  ;to return a set from first set which is different form second set 'difference'\\n  (println (set/difference \#{1 2} \#{2 3}))\\n  \\n  ;to return intersection of two sets use 'intersect'\\n  (println (set/intersection \#{1 2} \#{2 3}))\\n  \\n  ;to get subset or super set\\n  (println (set/subset \#{1 2} \#{1 2 3}))\\n  (println (set/superset \#{1 2 3} \#{1 2})))\\n\\n(setMethods)" "(ns asg2.setsMethods\\n  (\:require [clojure.set \:as set]))\\n\\n(defn setMethods []\\n  ;general set creation and set removes duplicates \\n  (println (set '(1 2 3 4 1)))\\n  \\n  ;sorting sets is very easy 'sorted-sets'\\n  (println (sorted-set 1 1 3 2 7 6 5 5))\\n  \\n  ;to return a element at a specific index \\n  (println (get (set '(1 1 2 3 4 5) 2)))\\n  \\n  ;to find if a element is present we use 'contains ?'\\n  (println (contains? (set '(1 2 3 4 5) 3)))\\n  \\n  ;to append an element to the set use 'conj'\\n  (println (conj (set '(1 2 3 4) 5 6)))\\n  \\n  ;to remove an element from a set use 'disj'\\n  (println (disj (set '(1 2 3 4 5 6) 6)))\\n  \\n  ;to add two sets use 'union'\\n  (println (set/union \#{1 2} \#{3 4}))\\n  \\n  ;to return a set from first set which is different form second set 'difference'\\n  (println (set/difference \#{1 2} \#{2 3}))\\n  \\n  ;to return intersection of two sets use 'intersect'\\n  (println (set/intersection \#{1 2} \#{2 3}))\\n  \\n  ;to get subset or super set\\n  (println (set/subset \#{1 2} \#{1 2 3}))\\n  (println (set/superset \#{1 2 3} \#{1 2})))\\n\\n(setMethods)" "(defn setMethods []\\n  ;general set creation and set removes duplicates \\n  (println (set '(1 2 3 4 1)))\\n  \\n  ;sorting sets is very easy 'sorted-sets'\\n  (println (sorted-set 1 1 3 2 7 6 5 5))\\n  \\n  ;to return a element at a specific index \\n  (println (get (set '(1 1 2 3 4 5) 2)))\\n  \\n  ;to find if a element is present we use 'contains ?'\\n  (println (contains? (set '(1 2 3 4 5) 3)))\\n  \\n  ;to append an element to the set use 'conj'\\n  (println (conj (set '(1 2 3 4) 5 6)))\\n  \\n  ;to remove an element from a set use 'disj'\\n  (println (disj (set '(1 2 3 4 5 6) 6)))\\n  \\n  ;to add two sets use 'union'\\n  (println (clojure.set/union \#{1 2} \#{3 4}))\\n  \\n  ;to return a set from first set which is different form second set 'difference'\\n  (println (clojure.set/difference \#{1 2} \#{2 3}))\\n  \\n  ;to return intersection of two sets use 'intersect'\\n  (println (clojure.set/intersection \#{1 2} \#{2 3}))\\n  \\n  ;to get subset or super set\\n  (println (clojure.set/subset \#{1 2} \#{1 2 3}))\\n  (println (clojure.set/superset \#{1 2 3} \#{1 2})))\\n\\n(setMethods)" "(defn setMethods []\\n  ;general set creation and set removes duplicates \\n  (println (set '(1 2 3 4 1)))\\n  \\n  ;sorting sets is very easy 'sorted-sets'\\n  (println (sorted-set 1 1 3 2 7 6 5 5))\\n  \\n  ;to return a element at a specific index \\n  (println (get (set '(1 1 2 3 4 5) 2)))\\n  \\n  ;to find if a element is present we use 'contains ?'\\n  (println (contains? (set '(1 2 3 4 5) 3)))\\n  \\n  ;to append an element to the set use 'conj'\\n  (println (conj (set '(1 2 3 4) 5 6)))\\n  \\n  ;to remove an element from a set use 'disj'\\n  (println (disj (set '(1 2 3 4 5 6) 6)))\\n  \\n  ;to add two sets use 'union'\\n  (println (clojure.set/union \#{1 2} \#{3 4}))\\n  \\n  ;to return a set from first set which is different form second set 'difference'\\n  (println (clojure.core.set/difference \#{1 2} \#{2 3}))\\n  \\n  ;to return intersection of two sets use 'intersect'\\n  (println (clojure.set/intersection \#{1 2} \#{2 3}))\\n  \\n  ;to get subset or super set\\n  (println (clojure.set/subset \#{1 2} \#{1 2 3}))\\n  (println (clojure.set/superset \#{1 2 3} \#{1 2})))\\n\\n(setMethods)" "(require 'clojure.set)" "(defn setMethods []\\n  ;general set creation and set removes duplicates \\n  (println (set '(1 2 3 4 1)))\\n  \\n  ;sorting sets is very easy 'sorted-sets'\\n  (println (sorted-set 1 1 3 2 7 6 5 5))\\n  \\n  ;to return a element at a specific index \\n  (println (get (set '(1 1 2 3 4 5) 2)))\\n  \\n  ;to find if a element is present we use 'contains ?'\\n  (println (contains? (set '(1 2 3 4 5) 3)))\\n  \\n  ;to append an element to the set use 'conj'\\n  (println (conj (set '(1 2 3 4) 5 6)))\\n  \\n  ;to remove an element from a set use 'disj'\\n  (println (disj (set '(1 2 3 4 5 6) 6)))\\n  \\n  ;to add two sets use 'union'\\n  (println (clojure.set/union \#{1 2} \#{3 4}))\\n  \\n  ;to return a set from first set which is different form second set 'difference'\\n  (println (clojure.set/difference \#{1 2} \#{2 3}))\\n  \\n  ;to return intersection of two sets use 'intersect'\\n  (println (clojure.set/intersection \#{1 2} \#{2 3}))\\n  \\n  ;to get subset or super set\\n  (println (clojure.set/subset \#{1 2} \#{1 2 3}))\\n  (println (clojure.set/superset \#{1 2 3} \#{1 2})))\\n\\n(setMethods)" "(defn setMethods []\\n  ;general set creation and set removes duplicates \\n  (println (set '(1 2 3 4 1)))\\n  \\n  ;sorting sets is very easy 'sorted-sets'\\n  (println (sorted-set 1 1 3 2 7 6 5 5))\\n  \\n  ;to return a element at a specific index \\n  (println (get (set '(1 1 2 3 4 5) 2)))\\n  \\n  ;to find if a element is present we use 'contains ?'\\n  (println (contains? (set '(1 2 3 4 5) 3)))\\n  \\n  ;to append an element to the set use 'conj'\\n  (println (conj (set '(1 2 3 4) 5 6)))\\n  \\n  ;to remove an element from a set use 'disj'\\n  (println (disj (set '(1 2 3 4 5 6) 6)));to add two sets use 'union'\\n  (println (clojure.set/union \#{1 2} \#{3 4}))\\n  \\n  ;to return a set from first set which is different form second set 'difference'\\n  (println (clojure.set/difference \#{1 2} \#{2 3}))\\n  \\n  ;to return intersection of two sets use 'intersect'\\n  (println (clojure.set/intersection \#{1 2} \#{2 3}))\\n  \\n  ;to get subset or super set\\n  (println (clojure.set/subset \#{1 2} \#{1 2 3}))\\n  (println (clojure.set/superset \#{1 2 3} \#{1 2})))\\n\\n(setMethods)" "(defn setMethods []\\n  ;general set creation and set removes duplicates \\n  (println (set '(1 2 3 4 1)))\\n  \\n  ;sorting sets is very easy 'sorted-sets'\\n  (println (sorted-set 1 1 3 2 7 6 5 5))\\n  \\n  ;to return a element at a specific index \\n  (println (get (set '(1 1 2 3 4 5) 2)))\\n  \\n  ;to find if a element is present we use 'contains ?'\\n  (println (contains? (set '(1 2 3 4 5) 3)))\\n  \\n  ;to append an element to the set use 'conj'\\n  (println (conj (set '(1 2 3 4) 5 6)))\\n  \\n  ;to remove an element from a set use 'disj'\\n  (println (disj (set '(1 2 3 4 5 6) 6))))\\n\\n(setMethods)" "(defn setMethods []\\n  ;general set creation and set removes duplicates \\n  (println (set '(1 2 3 4 1)))\\n  \\n  ;sorting sets is very easy 'sorted-sets'\\n  (println (sorted-set 1 1 3 2 7 6 5 5))\\n  \\n  ;to return a element at a specific index \\n  (println (get (set '(1 1 2 3 4 5)) 2))\\n  \\n  ;to find if a element is present we use 'contains ?'\\n  (println (contains? (set '(1 2 3 4 5) 3)))\\n  \\n  ;to append an element to the set use 'conj'\\n  (println (conj (set '(1 2 3 4) 5 6)))\\n  \\n  ;to remove an element from a set use 'disj'\\n  (println (disj (set '(1 2 3 4 5 6) 6))))\\n\\n(setMethods)" "(defn setMethods []\\n  ;general set creation and set removes duplicates \\n  (println (set '(1 2 3 4 1)))\\n  \\n  ;sorting sets is very easy 'sorted-sets'\\n  (println (sorted-set 1 1 3 2 7 6 5 5))\\n  \\n  ;to return a element at a specific index \\n  (println (get (set '(1 1 2 3 4 5)) 2))\\n  \\n  ;to find if a element is present we use 'contains ?'\\n  (println (contains? (set '(1 2 3 4 5))3))\\n  \\n  ;to append an element to the set use 'conj'\\n  (println (conj (set '(1 2 3 4) 5 6)))\\n  \\n  ;to remove an element from a set use 'disj'\\n  (println (disj (set '(1 2 3 4 5 6) 6))))\\n\\n(setMethods)" "(defn setMethods []\\n  ;general set creation and set removes duplicates \\n  (println (set '(1 2 3 4 1)))\\n  \\n  ;sorting sets is very easy 'sorted-sets'\\n  (println (sorted-set 1 1 3 2 7 6 5 5))\\n  \\n  ;to return a element at a specific index \\n  (println (get (set '(1 1 2 3 4 5)) 2))\\n  \\n  ;to find if a element is present we use 'contains ?'\\n  (println (contains? (set '(1 2 3 4 5))3))\\n  \\n  ;to append an element to the set use 'conj'\\n  (println (conj (set '(1 2 3 4)) 5 6))\\n  \\n  ;to remove an element from a set use 'disj'\\n  (println (disj (set '(1 2 3 4 5 6) 6))))\\n\\n(setMethods)" "(defn setMethods []\\n  ;general set creation and set removes duplicates \\n  (println (set '(1 2 3 4 1)))\\n  \\n  ;sorting sets is very easy 'sorted-sets'\\n  (println (sorted-set 1 1 3 2 7 6 5 5))\\n  \\n  ;to return a element at a specific index \\n  (println (get (set '(1 1 2 3 4 5)) 2))\\n  \\n  ;to find if a element is present we use 'contains ?'\\n  (println (contains? (set '(1 2 3 4 5))3))\\n  \\n  ;to append an element to the set use 'conj'\\n  (println (conj (set '(1 2 3 4)) 5 6))\\n  \\n  ;to remove an element from a set use 'disj'\\n  (println (disj (set '(1 2 3 4 5 6)) 6)))\\n\\n(setMethods)" "(defn setMethods []\\n  ;general set creation and set removes duplicates \\n  (println (set '(1 2 3 4 1)))\\n  \\n  ;sorting sets is very easy 'sorted-sets'\\n  (println (sorted-set 1 1 3 2 7 6 5 5))\\n  \\n  ;to return a element at a specific index \\n  (println (get (set '(1 1 2 3 4 5)) 2))\\n  \\n  ;to find if a element is present we use 'contains ?'\\n  (println (contains? (set '(1 2 3 4 5))3))\\n  \\n  ;to append an element to the set use 'conj'\\n  (println (conj (set '(1 2 3 4)) 5 6))\\n  \\n  ;to remove an element from a set use 'disj'\\n  (println (disj (set '(1 2 3 4 5 6)) 6))\\n  \\n  ;to add two sets use 'union'\\n  (println (clojure.set/union \#{1 2} \#{3 4}))\\n  \\n  ;to return a set from first set which is different form second set 'difference'\\n  (println (clojure.set/difference \#{1 2} \#{2 3}))\\n  \\n  ;to return intersection of two sets use 'intersect'\\n  (println (clojure.set/intersection \#{1 2} \#{2 3}))\\n  \\n  ;to get subset or super set\\n  (println (clojure.set/subset \#{1 2} \#{1 2 3}))\\n  (println (clojure.set/superset \#{1 2 3} \#{1 2})))\\n\\n(setMethods)" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (println (hash-map \\"a\\" \\"1\\" \\"b\\" \\"2\\" \\"c\\" \\"3\\"))\\n   (println (sorted-map \\"a\\" \\"1\\" \\"b\\" \\"2\\" \\"c\\" \\"3\\")))\\n(mapMethods)" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (println (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (sorted-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\")))\\n(mapMethods)" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (def demo (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (sorted-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   \\n   ;to get a value corresponding to a key use 'get'\\n   (println (get demo \\"b\\")))\\n(mapMethods)" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (def demo (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (sorted-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   \\n   ;to get a value corresponding to a key use 'get'\\n   (println (get demo \\"b\\"))\\n   \\n   ;to check if a key is presetn use 'contian'\\n   (println (contain? demo \\"c\\")))\\n(mapMethods)" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (def demo (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (sorted-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   \\n   ;to get a value corresponding to a key use 'get'\\n   (println (get demo \\"b\\"))\\n   \\n   ;to check if a key is presetn use 'contian'\\n   (println (contain? demo \\"c\\"))\\n   (println (contain? demo \\"z\\")))\\n(mapMethods)" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (def demo (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (sorted-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   \\n   ;to get a value corresponding to a key use 'get'\\n   (println (get demo \\"b\\"))\\n   \\n   ;to check if a key is presetn use 'contians'\\n   (println (contains? demo \\"c\\"))\\n   (println (contains? demo \\"z\\")))\\n(mapMethods)" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (def demo (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (sorted-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   \\n   ;to get a value corresponding to a key use 'get'\\n   (println (get demo \\"b\\"))\\n   \\n   ;to check if a key is presetn use 'contians'\\n   (println (contains? demo \\"c\\"))\\n   (println (contains? demo \\"z\\"))\\n   \\n   ;returns the key value pair\\n   (println (find demo \\"z\\")))\\n\\n(mapMethods)" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (def demo (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (sorted-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   \\n   ;to get a value corresponding to a key use 'get'\\n   (println (get demo \\"b\\"))\\n   \\n   ;to check if a key is presetn use 'contians'\\n   (println (contains? demo \\"c\\"))\\n   (println (contains? demo \\"z\\"))\\n   \\n   ;returns the key value pair\\n   (println (find demo \\"z\\"))\\n   \\n   ;returns list of values in the map\\n   (println (val demo)))\\n\\n(mapMethods)" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (def demo (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (sorted-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   \\n   ;to get a value corresponding to a key use 'get'\\n   (println (get demo \\"b\\"))\\n   \\n   ;to check if a key is presetn use 'contians'\\n   (println (contains? demo \\"c\\"))\\n   (println (contains? demo \\"z\\"))\\n   \\n   ;returns the key value pair\\n   (println (find demo \\"z\\"))\\n   \\n   ;returns list of values in the map\\n   (println (vals demo)))\\n\\n(mapMethods)" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (def demo (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (sorted-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   \\n   ;to get a value corresponding to a key use 'get'\\n   (println (get demo \\"b\\"))\\n   \\n   ;to check if a key is presetn use 'contians'\\n   (println (contains? demo \\"c\\"))\\n   (println (contains? demo \\"z\\"))\\n   \\n   ;returns the key value pair\\n   (println (find demo \\"z\\"))\\n   \\n   ;returns list of values in the map\\n   (println (vals demo))\\n   \\n   ;returns the list of keys\\n   (println (keys demo)))\\n\\n(mapMethods)" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (def demo (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (sorted-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   \\n   ;to get a value corresponding to a key use 'get'\\n   (println (get demo \\"b\\"))\\n   \\n   ;to check if a key is presetn use 'contians'\\n   (println (contains? demo \\"c\\"))\\n   (println (contains? demo \\"z\\"))\\n   \\n   ;returns the key value pair\\n   (println (find demo \\"z\\"))\\n   \\n   ;returns list of values in the map\\n   (println (vals demo))\\n   \\n   ;returns the list of keys\\n   (println (keys demo))\\n   \\n   ;to remove a key value pair use 'dissoc'\\n   (println (dissoc demo \\"b\\")))\\n\\n(mapMethods)" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (def demo (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (sorted-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   \\n   ;to get a value corresponding to a key use 'get'\\n   (println (get demo \\"b\\"))\\n   \\n   ;to check if a key is presetn use 'contians'\\n   (println (contains? demo \\"c\\"))\\n   (println (contains? demo \\"z\\"))\\n   \\n   ;returns the key value pair\\n   (println (find demo \\"z\\"))\\n   \\n   ;returns list of values in the map\\n   (println (vals demo))\\n   \\n   ;returns the list of keys\\n   (println (keys demo))\\n   \\n   ;to remove a key value pair use 'dissoc'\\n   (println (dissoc demo \\"b\\"))\\n   \\n   ;to merge to hashmaps\\n   (def demo2 \\"k\\" \\"0\\" \\"d\\" \\"9\\")\\n   (println (merge demo demo2)))\\n\\n(mapMethods)" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (def demo (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (sorted-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   \\n   ;to get a value corresponding to a key use 'get'\\n   (println (get demo \\"b\\"))\\n   \\n   ;to check if a key is presetn use 'contians'\\n   (println (contains? demo \\"c\\"))\\n   (println (contains? demo \\"z\\"))\\n   \\n   ;returns the key value pair\\n   (println (find demo \\"z\\"))\\n   \\n   ;returns list of values in the map\\n   (println (vals demo))\\n   \\n   ;returns the list of keys\\n   (println (keys demo))\\n   \\n   ;to remove a key value pair use 'dissoc'\\n   (println (dissoc demo \\"b\\"))\\n   \\n   ;to merge to hashmaps\\n   (def demo2 (hash-map \\"k\\" \\"0\\" \\"d\\" \\"9\\"))\\n   (println (merge demo demo2)))\\n\\n(mapMethods)" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (def demo (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (sorted-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   \\n   ;to get a value corresponding to a key use 'get'\\n   (println (get demo \\"b\\"))\\n   \\n   ;to check if a key is presetn use 'contians'\\n   (println (contains? demo \\"c\\"))\\n   (println (contains? demo \\"z\\"))\\n   \\n   ;returns the key value pair\\n   (println (find demo \\"z\\"))\\n   \\n   ;returns list of values in the map\\n   (println (vals demo))\\n   \\n   ;returns the list of keys\\n   (println (keys demo))\\n   \\n   ;to remove a key value pair use 'dissoc'\\n   (println (dissoc demo \\"b\\"))\\n   \\n   ;to merge to hashmaps\\n   (def demo2 (hash-map \\"k\\" \\"0\\" \\"d\\" \\"9\\"))\\n   (println (merge demo demo2))\\n   (println (merge-with + demo demo2)))\\n\\n(mapMethods)" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (def demo (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (sorted-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   \\n   ;to get a value corresponding to a key use 'get'\\n   (println (get demo \\"b\\"))\\n   \\n   ;to check if a key is presetn use 'contians'\\n   (println (contains? demo \\"c\\"))\\n   (println (contains? demo \\"z\\"))\\n   \\n   ;returns the key value pair\\n   (println (find demo \\"z\\"))\\n   \\n   ;returns list of values in the map\\n   (println (vals demo))\\n   \\n   ;returns the list of keys\\n   (println (keys demo))\\n   \\n   ;to remove a key value pair use 'dissoc'\\n   (println (dissoc demo \\"b\\"))\\n   \\n   ;to merge to hashmaps\\n   (def demo2 (hash-map \\"k\\" \\"0\\" \\"d\\" \\"9\\"))\\n   (println (merge demo demo2))\\n   (println (merge-with + demo demo2))\\n   \\n   ;to invert the map\\n   (println (invert-map demo)))\\n\\n(mapMethods)" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (def demo (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (sorted-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   \\n   ;to get a value corresponding to a key use 'get'\\n   (println (get demo \\"b\\"))\\n   \\n   ;to check if a key is presetn use 'contians'\\n   (println (contains? demo \\"c\\"))\\n   (println (contains? demo \\"z\\"))\\n   \\n   ;returns the key value pair\\n   (println (find demo \\"z\\"))\\n   \\n   ;returns list of values in the map\\n   (println (vals demo))\\n   \\n   ;returns the list of keys\\n   (println (keys demo))\\n   \\n   ;to remove a key value pair use 'dissoc'\\n   (println (dissoc demo \\"b\\"))\\n   \\n   ;to merge to hashmaps\\n   (def demo2 (hash-map \\"k\\" \\"0\\" \\"d\\" \\"9\\"))\\n   (println (merge demo demo2))\\n   (println (merge-with + demo demo2))\\n   \\n   ;to invert the map\\n   (println (map-invert demo)))\\n\\n(mapMethods)" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (def demo (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (sorted-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   \\n   ;to get a value corresponding to a key use 'get'\\n   (println (get demo \\"b\\"))\\n   \\n   ;to check if a key is presetn use 'contians'\\n   (println (contains? demo \\"c\\"))\\n   (println (contains? demo \\"z\\"))\\n   \\n   ;returns the key value pair\\n   (println (find demo \\"z\\"))\\n   \\n   ;returns list of values in the map\\n   (println (vals demo))\\n   \\n   ;returns the list of keys\\n   (println (keys demo))\\n   \\n   ;to remove a key value pair use 'dissoc'\\n   (println (dissoc demo \\"b\\"))\\n   \\n   ;to merge to hashmaps\\n   (def demo2 (hash-map \\"k\\" \\"0\\" \\"d\\" \\"9\\"))\\n   (println (merge demo demo2))\\n   (println (merge-with + demo demo2))\\n   \\n   ;to invert the map\\n   (println (clojure.set/map-invert demo)))\\n\\n(mapMethods)" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (def demo (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (sorted-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   \\n   ;to get a value corresponding to a key use 'get'\\n   (println (get demo \\"b\\"))\\n   \\n   ;to check if a key is presetn use 'contians'\\n   (println (contains? demo \\"c\\"))\\n   (println (contains? demo \\"z\\"))\\n   \\n   ;returns the key value pair\\n   (println (find demo \\"z\\"))\\n   \\n   ;returns list of values in the map\\n   (println (vals demo))\\n   \\n   ;returns the list of keys\\n   (println (keys demo))\\n   \\n   ;to remove a key value pair use 'dissoc'\\n   (println (dissoc demo \\"b\\"))\\n   \\n   ;to merge to hashmaps\\n   (def demo2 (hash-map \\"k\\" \\"0\\" \\"d\\" \\"9\\"))\\n   (println (merge demo demo2))\\n   (println (merge-with + demo demo2))\\n   \\n   ;to invert the map - keys becomes values and values becomes keys\\n   (println (clojure.set/map-invert demo))\\n   \\n   ;returns a map containing the keys given\\n   (println (select-keys demo [\\"a\\" \\"b\\"])))\\n\\n(mapMethods)" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (def demo (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (sorted-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   \\n   ;to get a value corresponding to a key use 'get'\\n   (println (get demo \\"b\\"))\\n   \\n   ;to check if a key is presetn use 'contians'\\n   (println (contains? demo \\"c\\"))\\n   (println (contains? demo \\"z\\"))\\n   \\n   ;returns the key value pair\\n   (println (find demo \\"z\\"))\\n   \\n   ;returns list of values in the map\\n   (println (vals demo))\\n   \\n   ;returns the list of keys\\n   (println (keys demo))\\n   \\n   ;to remove a key value pair use 'dissoc'\\n   (println (dissoc demo \\"b\\"))\\n   \\n   ;to merge to hashmaps\\n   (def demo2 (hash-map \\"k\\" \\"0\\" \\"d\\" \\"9\\"))\\n   (println (merge demo demo2))\\n   (println (merge-with + demo demo2))\\n   \\n   ;to invert the map - keys becomes values and values becomes keys\\n   (println (clojure.set/map-invert demo))\\n   \\n   ;returns a map containing the keys given\\n   (println (select-keys demo [\\"a\\" \\"b\\"]))\\n   \\n   ;to rename keys with different keys\\n   (println (clojure.set/rename demo {\\"a\\" \\"demo1\\" \\"b\\" \\"demo2\\"})))\\n\\n(mapMethods)" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (def demo (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (sorted-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   \\n   ;to get a value corresponding to a key use 'get'\\n   (println (get demo \\"b\\"))\\n   \\n   ;to check if a key is presetn use 'contians'\\n   (println (contains? demo \\"c\\"))\\n   (println (contains? demo \\"z\\"))\\n   \\n   ;returns the key value pair\\n   (println (find demo \\"z\\"))\\n   \\n   ;returns list of values in the map\\n   (println (vals demo))\\n   \\n   ;returns the list of keys\\n   (println (keys demo))\\n   \\n   ;to remove a key value pair use 'dissoc'\\n   (println (dissoc demo \\"b\\"))\\n   \\n   ;to merge to hashmaps\\n   (def demo2 (hash-map \\"k\\" \\"0\\" \\"d\\" \\"9\\"))\\n   (println (merge demo demo2))\\n   (println (merge-with + demo demo2))\\n   \\n   ;to invert the map - keys becomes values and values becomes keys\\n   (println (clojure.set/map-invert demo))\\n   \\n   ;returns a map containing the keys given\\n   (println (select-keys demo [\\"a\\" \\"b\\"]))\\n   \\n   ;to rename keys with different keys\\n   (println (clojure.set/rename-keys demo {\\"a\\" \\"demo1\\" \\"b\\" \\"demo2\\"})))\\n\\n(mapMethods)" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (def demo (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (sorted-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   \\n   ;to get a value corresponding to a key use 'get'\\n   (println (get demo \\"b\\"))\\n   \\n   ;to check if a key is presetn use 'contians'\\n   (println (contains? demo \\"c\\"))\\n   (println (contains? demo \\"z\\"))\\n   \\n   ;returns the key value pair\\n   (println (find demo \\"z\\"))\\n   \\n   ;returns list of values in the map\\n   (println (vals demo))\\n   \\n   ;returns the list of keys\\n   (println (keys demo))\\n   \\n   ;to remove a key value pair use 'dissoc'\\n   (println (dissoc demo \\"b\\"))\\n   \\n   ;to merge two hashmaps\\n   (def demo2 (hash-map \\"k\\" \\"0\\" \\"d\\" \\"9\\"))\\n   (println (merge demo demo2))\\n   (println (merge-with + demo demo2))\\n   \\n   ;to invert the map - keys becomes values and values becomes keys\\n   (println (clojure.set/map-invert demo))\\n   \\n   ;returns a map containing the keys given\\n   (println (select-keys demo [\\"a\\" \\"b\\"]))\\n   \\n   ;to rename keys with different keys\\n   (println (clojure.set/rename-keys demo {\\"a\\" \\"demo1\\" \\"b\\" \\"demo2\\"}))\\n   \\n   ;to merge with\\n   (println (merge-with + demo demo2)))\\n\\n(mapMethods)" "(defn userInput []\\n  (println user->(read-line)))\\n(userInput)" "(defn userInput []\\n  (println (read-line)))\\n(userInput)" "(defn userInput []\\n  (println (read-line))\\n  (println \\"printed output\\"))\\n(userInput)" "(defn readDataFromFile [fileName customerData]\\n  (customerData (str customerData (slurp fileName))))\\n\\n(defn main []\\n  (def customerData (str \\"\\"))\\n  (def fileName (str \\"cust.txt\\"))\\n  (readDataFromFile fileName customerData))\\n\\n(main)" "(defn readDataFromFile [fileName customerData]\\n  (customerData (str customerData (slurp fileName))))\\n\\n(defn main []\\n  (def customerData \\"\\")\\n  (def fileName \\"cust.txt\\")\\n  (readDataFromFile fileName customerData))\\n\\n(main)" "(defn readDataFromFile [fileName customerData]\\n  (customerData (str customerData (slurp fileName))))\\n\\n(defn main []\\n  (def customerData \\"\\")\\n  (def fileName \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")\\n  (readDataFromFile fileName customerData))\\n\\n(main)" "(defn readDataFromFile [fileName customerData]\\n  (customerData (str customerData (slurp fileName))))\\n\\n(defn mainMethod []\\n  (def customerData \\"\\")\\n  (def fileName \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")\\n  (readDataFromFile fileName customerData))\\n\\n(mainMethod)" "(defn readDataFromFile [fileName customerData]\\n  (customerData (str customerData (slurp fileName))))\\n\\n(defn mainMethod []\\n  (def customerData \\"\\")\\n  (def fileName \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")\\n  (readDataFromFile fileName customerData)\\n  (println customerData))\\n\\n(mainMethod)" "clj /Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/sales.clj" "clear" "clear()" "(clear)" "clj /Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/sales.clj" "/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/funExample.clj" "clj /Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/ioMethods.clj" "(defn readDataFromFile [fileName customerData]\\n  (customerData (str customerData (slurp fileName))))" "(defn readDataFromFile [fileName customerData]\\n  (customerData (str customerData (slurp fileName))))\\n(readDataFromFile \\"\\" \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")" "(defn readDataFromFile [fileName customerData]\\n  (customerData (str customerData (slurp fileName)))\\n  (println customerData))\\n(readDataFromFile \\"\\" \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")" "(defn stringMethods []\\n  ;general form of a string\\n  (println \\"I am dinesh\\")\\n  \\n  ;concatenation of a string by 'str'\\n  (println (str \\"I am \\" \\"dinesh\\"))\\n  \\n  ;formatting of any string by %s or %t or %06d\\n  (println (format \\"I am %s\\" \\"dinesh\\"))\\n  (println (format \\"padding with zeroes ahead %06d\\" 1234))\\n  \\n  ;to count size of string\\n  (println(count \\"I am dinesh\\"))\\n  \\n  ;to access substring of a string 'subs'\\n  (println (subs \\"i am dinesh\\" 5 10))\\n  \\n  ;To compare two strings and returns '+' or '0' or '-' \\n  ;if lesser(x<y) or equal(z\=y) or greater (x>y)\\n  (println (compare \\"dinesh\\" \\"Dinesh\\"))\\n  \\n  ;to convert a string to lowercase or uppercase\\n  (println (clojure.string/lower-case \\"DINESH Kumar\\"))\\n  (println (clojure.string/upper-case \\"dinesh Kumar\\"))\\n  \\n  ;to join a list or vector or any other collection\\n  (println (clojure.string/join \\",\\" [0 1 2 4]))\\n  \\n  ;To split based on a regular expression or based on \\\\n or \\\\rn\\n  (println (clojure.string/split \\"I am dinesh\\" \#\\" \\"))\\n  (println (clojure.string/split-lines \\"i am \\\\n dinesh\\" ))\\n  \\n  ;to reverse a string\\n  (println (reverse \\"dinesh\\"))\\n  \\n  ;to replace a string with another\\n  (println (clojure.string/replace \\"i am dinesh\\" \#\\"dinesh\\" \\"kumar\\"))\\n  \\n  ;To trim complete blank spaces or to trim left or right of string\\n  (println (clojure.string/trim \\"  i am dinesh \\"))\\n  (println (clojure.string/triml \\" i am dinesh  \\"))\\n  (println (clojure.string/trimr \\"  i am dinesh   \\")))\\n\\n(stringMethods)" "(defn readDataFromFile [fileName customerData]\\n  (println fileName)\\n  (println customerData)\\n  (customerData (str customerData (slurp fileName)))\\n  (println customerData))\\n(readDataFromFile \\"\\" \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")" "(defn readDataFromFile [fileName customerData]\\n  (println fileName)\\n  (println customerData)\\n  (defn s (slurp fileName))\\n  (customerData (str customerData s))\\n  (println customerData))\\n(readDataFromFile \\"\\" \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")" "(defn readFile []\\n  (def s  (slurp \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\"))\\n  (println s))\\n(readFile)" "(defn readFile [filename]\\n  (def s  (slurp filename))\\n  (println s))\\n(readFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")" "(defn readDataFromFile [fileName customerData]\\n  (println fileName)\\n  (println customerData)\\n  (defn s (slurp fileName))\\n  (println s)\\n  (customerData (str customerData s))\\n  (println customerData))\\n(readDataFromFile \\"\\" \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")" "(readDataFromFile \\" \\" \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")" "(defn readDataFromFile [fileName customerData]\\n  (println fileName)\\n  (println customerData)\\n  (def s (slurp fileName))\\n  (println s)\\n  (customerData (str customerData s))\\n  (println customerData))\\n(readDataFromFile \\" \\" \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")" "(defn readDataFromFile [fileName customerData]\\n     (println fileName)\\n     (println customerData)\\n     (def s (slurp fileName))\\n     (println s)\\n     (customerData (str customerData s))\\n     (println customerData))" "(readDataFromFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\" \\" \\")" "(defn readDataFromFile [fileName customerData]\\n  (println fileName)\\n  (println customerData)\\n  (def s (slurp fileName))\\n  (println s)\\n  (customerData (str customerData s))\\n  (println customerData))\\n\\n(defn mainMethod []\\n  (def customerData)\\n  (def fileName \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")\\n  (readDataFromFile fileName customerData)\\n  (println customerData))\\n\\n(mainMethod)" "(defn readDataFromFile [fileName customerData]\\n  (println fileName)\\n  (println customerData)\\n  (def s (slurp fileName))\\n  (println s)\\n  (customerData s)\\n  (println customerData))\\n\\n(defn mainMethod []\\n  (def customerData)\\n  (def fileName \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")\\n  (readDataFromFile fileName customerData)\\n  (println customerData))\\n\\n(mainMethod)" "(defn stringMethods [s]\\n  ;general form of a string\\n  (println \\"I am dinesh\\")\\n  \\n  ;concatenation of a string by 'str'\\n  (println (str \\"I am \\" \\"dinesh\\"))\\n  (println (str s \\"dinesh\\"))\\n  \\n  ;formatting of any string by %s or %t or %06d\\n  (println (format \\"I am %s\\" \\"dinesh\\"))\\n  (println (format \\"padding with zeroes ahead %06d\\" 1234))\\n  \\n  ;to count size of string\\n  (println(count \\"I am dinesh\\"))\\n  \\n  ;to access substring of a string 'subs'\\n  (println (subs \\"i am dinesh\\" 5 10))\\n  \\n  ;To compare two strings and returns '+' or '0' or '-' \\n  ;if lesser(x<y) or equal(z\=y) or greater (x>y)\\n  (println (compare \\"dinesh\\" \\"Dinesh\\"))\\n  \\n  ;to convert a string to lowercase or uppercase\\n  (println (clojure.string/lower-case \\"DINESH Kumar\\"))\\n  (println (clojure.string/upper-case \\"dinesh Kumar\\"))\\n  \\n  ;to join a list or vector or any other collection\\n  (println (clojure.string/join \\",\\" [0 1 2 4]))\\n  \\n  ;To split based on a regular expression or based on \\\\n or \\\\rn\\n  (println (clojure.string/split \\"I am dinesh\\" \#\\" \\"))\\n  (println (clojure.string/split-lines \\"i am \\\\n dinesh\\" ))\\n  \\n  ;to reverse a string\\n  (println (reverse \\"dinesh\\"))\\n  \\n  ;to replace a string with another\\n  (println (clojure.string/replace \\"i am dinesh\\" \#\\"dinesh\\" \\"kumar\\"))\\n  \\n  ;To trim complete blank spaces or to trim left or right of string\\n  (println (clojure.string/trim \\"  i am dinesh \\"))\\n  (println (clojure.string/triml \\" i am dinesh  \\"))\\n  (println (clojure.string/trimr \\"  i am dinesh   \\")))\\n\\n(stringMethods \\"***************\\")" "(defn stringMethods [s]\\n     ;general form of a string\\n     (println \\"I am dinesh\\")\\n     \\n     ;concatenation of a string by 'str'\\n     (println (str \\"I am \\" \\"dinesh\\"))\\n     (println (str s \\"dinesh\\"))\\n     \\n     ;formatting of any string by %s or %t or %06d\\n     (println (format \\"I am %s\\" \\"dinesh\\"))\\n     (println (format \\"padding with zeroes ahead %06d\\" 1234))\\n     \\n     ;to count size of string\\n     (println(count \\"I am dinesh\\"))\\n     \\n     ;to access substring of a string 'subs'\\n     (println (subs \\"i am dinesh\\" 5 10))\\n     \\n     ;To compare two strings and returns '+' or '0' or '-' \\n     ;if lesser(x<y) or equal(z\=y) or greater (x>y)\\n     (println (compare \\"dinesh\\" \\"Dinesh\\"))\\n     \\n     ;to convert a string to lowercase or uppercase\\n     (println (clojure.string/lower-case \\"DINESH Kumar\\"))\\n     (println (clojure.string/upper-case \\"dinesh Kumar\\"))\\n     \\n     ;to join a list or vector or any other collection\\n     (println (clojure.string/join \\",\\" [0 1 2 4]))\\n     \\n     ;To split based on a regular expression or based on \\\\n or \\\\rn\\n     (println (clojure.string/split \\"I am dinesh\\" \#\\" \\"))\\n     (println (clojure.string/split-lines \\"i am \\\\n dinesh\\" ))\\n     \\n     ;to reverse a string\\n     (println (reverse \\"dinesh\\"))\\n     \\n     ;to replace a string with another\\n     (println (clojure.string/replace \\"i am dinesh\\" \#\\"dinesh\\" \\"kumar\\"))\\n     \\n     ;To trim complete blank spaces or to trim left or right of string\\n     (println (clojure.string/trim \\"  i am dinesh \\"))\\n     (println (clojure.string/triml \\" i am dinesh  \\"))\\n     (println (clojure.string/trimr \\"  i am dinesh   \\")))\\n   \\n   (stringMethods \\" \\")" "(defn stringMethods [s]\\n     ;general form of a string\\n     (println \\"I am dinesh\\")\\n     \\n     ;concatenation of a string by 'str'\\n     (println (str \\"I am \\" \\"dinesh\\"))\\n     (println (str s \\"dinesh\\"))\\n     \\n     ;formatting of any string by %s or %t or %06d\\n     (println (format \\"I am %s\\" \\"dinesh\\"))\\n     (println (format \\"padding with zeroes ahead %06d\\" 1234))\\n     \\n     ;to count size of string\\n     (println(count \\"I am dinesh\\"))\\n     \\n     ;to access substring of a string 'subs'\\n     (println (subs \\"i am dinesh\\" 5 10))\\n     \\n     ;To compare two strings and returns '+' or '0' or '-' \\n     ;if lesser(x<y) or equal(z\=y) or greater (x>y)\\n     (println (compare \\"dinesh\\" \\"Dinesh\\"))\\n     \\n     ;to convert a string to lowercase or uppercase\\n     (println (clojure.string/lower-case \\"DINESH Kumar\\"))\\n     (println (clojure.string/upper-case \\"dinesh Kumar\\"))\\n     \\n     ;to join a list or vector or any other collection\\n     (println (clojure.string/join \\",\\" [0 1 2 4]))\\n     \\n     ;To split based on a regular expression or based on \\\\n or \\\\rn\\n     (println (clojure.string/split \\"I am dinesh\\" \#\\" \\"))\\n     (println (clojure.string/split-lines \\"i am \\\\n dinesh\\" ))\\n     \\n     ;to reverse a string\\n     (println (reverse \\"dinesh\\"))\\n     \\n     ;to replace a string with another\\n     (println (clojure.string/replace \\"i am dinesh\\" \#\\"dinesh\\" \\"kumar\\"))\\n     \\n     ;To trim complete blank spaces or to trim left or right of string\\n     (println (clojure.string/trim \\"  i am dinesh \\"))\\n     (println (clojure.string/triml \\" i am dinesh  \\"))\\n     (println (clojure.string/trimr \\"  i am dinesh   \\")))\\n   \\n   (stringMethods \\"\\")" "(defn readDataFromFile [fileName customerData]\\n  (println fileName)\\n  (println customerData)\\n  (def s (slurp fileName))\\n  (println s)\\n  (alter-var-roort customerData s)\\n  (println customerData))\\n\\n(defn mainMethod []\\n  (def customerData \\" \\")\\n  (def fileName \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")\\n  (readDataFromFile fileName customerData)\\n  (println customerData))\\n\\n(mainMethod)" "(defn readDataFromFile [fileName customerData]\\n  (println fileName)\\n  (println customerData)\\n  (def s (slurp fileName))\\n  (println s)\\n  (alter-var-roort customerData s)\\n  (println customerData))\\n\\n(defn mainMethod []\\n  (def customerData \\"x\\")\\n  (def fileName \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")\\n  (readDataFromFile fileName customerData)\\n  (println customerData))\\n\\n(mainMethod)" "(defn readDataFromFile [fileName customerData]\\n  (println fileName)\\n  (println customerData)\\n  (def s (slurp fileName))\\n  (println s)\\n  (alter-var-roort customerData (fn [_] s))\\n  (println customerData))\\n\\n(defn mainMethod []\\n  (def customerData \\"x\\")\\n  (def fileName \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")\\n  (readDataFromFile fileName customerData)\\n  (println customerData))\\n\\n(mainMethod)" "(defn readDataFromFile [fileName customerData]\\n  (println fileName)\\n  (println customerData)\\n  (def s (slurp fileName))\\n  (println s)\\n  (alter-var-root entry-value (fn [_] \\"qwe\\"))\\n  (println customerData))\\n\\n(defn mainMethod []\\n  (def customerData)\\n  (def fileName \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")\\n  (readDataFromFile fileName customerData)\\n  (println customerData))\\n\\n(mainMethod)" "(defn mainMethod []\\n  (def customerData (slurp \\n                   \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\"))\\n  (println customerData)\\n  (def salesData (slurp \\n                   \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\"))\\n  (println salesData))\\n\\n(mainMethod)" "(defn mainMethod []\\n  (def customerData (slurp \\n                   \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\"))\\n  (println customerData)\\n  (def salesData (slurp \\n                   \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/sales.txt\\"))\\n  (println salesData))\\n\\n(mainMethod)" "(defn mainMethod []\\n  (def customerFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")\\n  (def salesFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/sales.txt\\")\\n  (def customerData (slurp customerFile))\\n  (def salesData (slurp salesFile))\\n  (println customerData)\\n  (println salesData))\\n\\n(mainMethod)" "(defn readDataFromFile [fileName]\\n     (println fileName)\\n     (def s (slurp fileName))\\n     (s))\\n\\n(defn mainMethod []\\n  (def customerFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")\\n  (def salesFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/sales.txt\\")\\n  (def customerData (slurp customerFile))\\n  (def salesData (slurp salesFile))\\n  (println readDataFromFile customerFile)\\n  (println customerData)\\n  (println salesData))\\n\\n(mainMethod)" "(defn readDataFromFile [fileName]\\n     (println fileName)\\n     (def s (slurp fileName))\\n     (println s)\\n     (s))\\n\\n(defn mainMethod []\\n  (def customerFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")\\n  (def salesFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/sales.txt\\")\\n  (def customerData (slurp customerFile))\\n  (def salesData (slurp salesFile))\\n  (println readDataFromFile customerFile)\\n  (println customerData)\\n  (println salesData))\\n\\n(mainMethod)" "(defn readDataFromFile [fileName]\\n     (println fileName)\\n     (def s (slurp fileName))\\n     (println s)\\n     (s))\\n\\n(defn mainMethod []\\n  (def customerFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")\\n  (def salesFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/sales.txt\\")\\n  (def customerData (slurp customerFile))\\n  (def salesData (slurp salesFile))\\n  (println (readDataFromFile customerFile))\\n  (println customerData)\\n  (println salesData))\\n\\n(mainMethod)" "(defn readDataFromFile [fileName]\\n     (println fileName)\\n     (def s (slurp fileName))\\n     (str \\" \\" s))\\n\\n(defn mainMethod []\\n  (def customerFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")\\n  (def salesFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/sales.txt\\")\\n  (def customerData (slurp customerFile))\\n  (def salesData (slurp salesFile))\\n  (println (readDataFromFile customerFile))\\n  (println customerData)\\n  (println salesData))\\n\\n(mainMethod)" "(defn readDataFromFile [fileName]\\n     (println fileName)\\n     (def s (slurp fileName))\\n     (s))\\n\\n(defn mainMethod []\\n  (def customerFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")\\n  (def salesFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/sales.txt\\")\\n  (def customerData (slurp customerFile))\\n  (def salesData (slurp salesFile))\\n  (println (readDataFromFile customerFile)))" "(mainMethod)" "(defn readDataFromFile [fileName]\\n     (println fileName)\\n     (def s (slurp fileName))\\n     (s))\\n\\n(defn mainMethod []\\n  (def customerFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")\\n  (def salesFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/sales.txt\\")\\n  (def customerData (slurp customerFile))\\n  (def salesData (slurp salesFile))\\n  (println (readDataFromFile customerFile)))\\n  ;(println customerData)\\n  ;(println salesData))\\n\\n(mainMethod)" "(defn readDataFromFile [fileName]\\n     (println fileName)\\n     (def s (slurp fileName))\\n     (str \\"\\" s))\\n\\n(defn mainMethod []\\n  (def customerFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")\\n  (def salesFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/sales.txt\\")\\n  (def customerData (slurp customerFile))\\n  (def salesData (slurp salesFile))\\n  (println (readDataFromFile customerFile)))\\n  ;(println customerData)\\n  ;(println salesData))\\n\\n(mainMethod)" "(defn readDataFromFile [fileName]\\n     (def s (slurp fileName))\\n     (str \\"\\" s))\\n\\n(defn mainMethod []\\n  (def customerFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")\\n  (def salesFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/sales.txt\\")\\n  (def customerData (slurp customerFile))\\n  (def salesData (slurp salesFile))\\n  (def cd (readDataFromFile customerFile))\\n  (println cd))\\n  ;(println customerData)\\n  ;(println salesData))\\n\\n(mainMethod)" "(defn readDataFromFile [fileName]\\n     (def s (slurp fileName)))\\n\\n(defn mainMethod []\\n  (def customerFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")\\n  (def salesFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/sales.txt\\")\\n  (def customerData (slurp customerFile))\\n  (def salesData (slurp salesFile))\\n  (def cd (readDataFromFile customerFile))\\n  (println cd))\\n  ;(println customerData)\\n  ;(println salesData))\\n\\n(mainMethod)" "(defn mainMethod []\\n  ;;definitions of file names\\n  (def custFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")\\n  (def prodFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/prod.txt\\")\\n  (def salesFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/sales.txt\\")\\n  \\n  ;;reads data from various sales files as a string\\n  (def custData (slurp custFile))\\n  (def prodData (slurp prodFile))\\n  (def salesData (slurp salesFile))\\n  (println custData)\\n  (println prodData\\n  (println salesData)))\\n\\n(mainMethod)" "(defn printData [data]\\n  (defn dataList (clojure.string/split-lines data))\\n  (println dataList))\\n\\n(defn mainMethod []\\n  ;;definitions of file names\\n  (def custFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")\\n  (def prodFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/prod.txt\\")\\n  (def salesFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/sales.txt\\")\\n  \\n  ;;reads data from various sales files as a string\\n  (def custData (slurp custFile))\\n  (def prodData (slurp prodFile))\\n  (def salesData (slurp salesFile))\\n  (printData custData))\\n\\n(mainMethod)" "(defn printData [data]\\n  (def dataList (clojure.string/split-lines data))\\n  (println dataList))\\n\\n(defn mainMethod []\\n  ;;definitions of file names\\n  (def custFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")\\n  (def prodFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/prod.txt\\")\\n  (def salesFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/sales.txt\\")\\n  \\n  ;;reads data from various sales files as a string\\n  (def custData (slurp custFile))\\n  (def prodData (slurp prodFile))\\n  (def salesData (slurp salesFile))\\n  (printData custData))\\n\\n(mainMethod)" "(def demokeys (sorted-map \\"z\\" (sorted-map \\"name\\" \\"dinesh\\" \\"address\\" \\"adlag\\") \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n(println demokeys)" "(count (list 1 2 3 4))" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (def demo (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (sorted-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   \\n   ;to get a value corresponding to a key use 'get'\\n   (println (get demo \\"b\\"))\\n   \\n   ;to check if a key is presetn use 'contians'\\n   (println (contains? demo \\"c\\"))\\n   (println (contains? demo \\"z\\"))\\n   \\n   ;returns the key value pair\\n   (println (find demo \\"z\\"))\\n   \\n   ;returns list of values in the map\\n   (println (vals demo))\\n   \\n   ;returns the list of keys\\n   (println (keys demo))\\n   \\n   ;to remove a key value pair use 'dissoc'\\n   (println (dissoc demo \\"b\\"))\\n   \\n   ;to merge two hashmaps\\n   (def demo2 (hash-map \\"k\\" \\"0\\" \\"d\\" \\"9\\"))\\n   (println (merge demo demo2))\\n   (println (merge-with + demo demo2))\\n   \\n   ;to invert the map - keys becomes values and values becomes keys\\n   (println (clojure.set/map-invert demo))\\n   \\n   ;returns a map containing the keys given\\n   (println (select-keys demo [\\"a\\" \\"b\\"]))\\n   \\n   ;to rename keys with different keys\\n   (println (clojure.set/rename-keys demo {\\"a\\" \\"demo1\\" \\"b\\" \\"demo2\\"}))\\n   \\n   ;to merge with\\n   (println (merge-with + demo demo2))\\n   (println demo)\\n   (println demo2))\\n\\n(mapMethods)" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (def demo (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (sorted-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   \\n   ;to get a value corresponding to a key use 'get'\\n   (println (get demo \\"b\\"))\\n   \\n   ;to check if a key is presetn use 'contians'\\n   (println (contains? demo \\"c\\"))\\n   (println (contains? demo \\"z\\"))\\n   \\n   ;returns the key value pair\\n   (println (find demo \\"z\\"))\\n   \\n   ;returns list of values in the map\\n   (println (vals demo))\\n   \\n   ;returns the list of keys\\n   (println (keys demo))\\n   \\n   ;to remove a key value pair use 'dissoc'\\n   (println (dissoc demo \\"b\\"))\\n   \\n   ;to merge two hashmaps\\n   (def demo2 (hash-map \\"k\\" \\"0\\" \\"d\\" \\"9\\"))\\n   (println (merge demo demo2))\\n   (println (merge-with + demo demo2))\\n   \\n   ;to invert the map - keys becomes values and values becomes keys\\n   (println (clojure.set/map-invert demo))\\n   \\n   ;returns a map containing the keys given\\n   (println (select-keys demo [\\"a\\" \\"b\\"]))\\n   \\n   ;to rename keys with different keys\\n   (println (clojure.set/rename-keys demo {\\"a\\" \\"demo1\\" \\"b\\" \\"demo2\\"}))\\n   \\n   ;to merge with\\n   (demo (merge-with + demo demo2))\\n   (println demo)\\n   (println demo2))\\n\\n(mapMethods)" "(defn mapMethods []\\n   ;Two types of maps one is hash-map & sorted-map\\n   ;sorted map is sorted based on keys\\n   (def demo (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (hash-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   (println (sorted-map \\"z\\" \\"1\\" \\"b\\" \\"2\\" \\"a\\" \\"3\\"))\\n   \\n   ;to get a value corresponding to a key use 'get'\\n   (println (get demo \\"b\\"))\\n   \\n   ;to check if a key is presetn use 'contians'\\n   (println (contains? demo \\"c\\"))\\n   (println (contains? demo \\"z\\"))\\n   \\n   ;returns the key value pair\\n   (println (find demo \\"z\\"))\\n   \\n   ;returns list of values in the map\\n   (println (vals demo))\\n   \\n   ;returns the list of keys\\n   (println (keys demo))\\n   \\n   ;to remove a key value pair use 'dissoc'\\n   (println (dissoc demo \\"b\\"))\\n   \\n   ;to merge two hashmaps\\n   (def demo2 (hash-map \\"k\\" \\"0\\" \\"d\\" \\"9\\"))\\n   (println (merge demo demo2))\\n   (println (merge-with + demo demo2))\\n   \\n   ;to invert the map - keys becomes values and values becomes keys\\n   (println (clojure.set/map-invert demo))\\n   \\n   ;returns a map containing the keys given\\n   (println (select-keys demo [\\"a\\" \\"b\\"]))\\n   \\n   ;to rename keys with different keys\\n   (println (clojure.set/rename-keys demo {\\"a\\" \\"demo1\\" \\"b\\" \\"demo2\\"}))\\n   \\n   ;to merge with\\n   (println (merge-with + demo demo2))\\n   (demo (merge-with + demo demo2))\\n   (println demo)\\n   (println demo2))\\n\\n(mapMethods)" "(defn processLine [dataList]\\n  (def detailsList (clojure.string/split dataList \#\\"|\\"))\\n  (def custMap (hash-map (first detailsList) (hash-map \\"name\\" (nth detailsList 1), \\"address\\" (nth detailsList 2), \\"phone\\" (nth detailsList 3))))\\n  (println custMap))\\n(processLine \\"3|Fan Yuhong|165 Happy Lane|345-4533\\")" "(defn processLine [dataList]\\n  (def detailsList (clojure.string/split dataList \#\\"|\\"))\\n  (println detailsList)\\n  (def custMap (hash-map (first detailsList) (hash-map \\"name\\" (nth detailsList 1), \\"address\\" (nth detailsList 2), \\"phone\\" (nth detailsList 3))))\\n  (println custMap))\\n(processLine \\"3|Fan Yuhong|165 Happy Lane|345-4533\\")" "(defn stringMethods [s]\\n  ;general form of a string\\n  (println \\"I am dinesh\\")\\n  \\n  ;concatenation of a string by 'str'\\n  (println (str \\"I am \\" \\"dinesh\\"))\\n  (println (str s \\"dinesh\\"))\\n  \\n  ;formatting of any string by %s or %t or %06d\\n  (println (format \\"I am %s\\" \\"dinesh\\"))\\n  (println (format \\"padding with zeroes ahead %06d\\" 1234))\\n  \\n  ;to count size of string\\n  (println(count \\"I am dinesh\\"))\\n  \\n  ;to access substring of a string 'subs'\\n  (println (subs \\"i am dinesh\\" 5 10))\\n  \\n  ;To compare two strings and returns '+' or '0' or '-' \\n  ;if lesser(x<y) or equal(z\=y) or greater (x>y)\\n  (println (compare \\"dinesh\\" \\"Dinesh\\"))\\n  \\n  ;to convert a string to lowercase or uppercase\\n  (println (clojure.string/lower-case \\"DINESH Kumar\\"))\\n  (println (clojure.string/upper-case \\"dinesh Kumar\\"))\\n  \\n  ;to join a list or vector or any other collection\\n  (println (clojure.string/join \\",\\" [0 1 2 4]))\\n  \\n  ;To split based on a regular expression or based on \\\\n or \\\\rn\\n  (println (clojure.string/split \\"I | am |dinesh\\" \#\\"|\\"))\\n  (println (clojure.string/split-lines \\"i am \\\\n dinesh\\" ))\\n  \\n  ;to reverse a string\\n  (println (reverse \\"dinesh\\"))\\n  \\n  ;to replace a string with another\\n  (println (clojure.string/replace \\"i am dinesh\\" \#\\"dinesh\\" \\"kumar\\"))\\n  \\n  ;To trim complete blank spaces or to trim left or right of string\\n  (println (clojure.string/trim \\"  i am dinesh \\"))\\n  (println (clojure.string/triml \\" i am dinesh  \\"))\\n  (println (clojure.string/trimr \\"  i am dinesh   \\")))\\n\\n(stringMethods)" "(defn stringMethods []\\n  ;general form of a string\\n  (println \\"I am dinesh\\")\\n  \\n  ;concatenation of a string by 'str'\\n  (println (str \\"I am \\" \\"dinesh\\"))\\n  \\n  ;formatting of any string by %s or %t or %06d\\n  (println (format \\"I am %s\\" \\"dinesh\\"))\\n  (println (format \\"padding with zeroes ahead %06d\\" 1234))\\n  \\n  ;to count size of string\\n  (println(count \\"I am dinesh\\"))\\n  \\n  ;to access substring of a string 'subs'\\n  (println (subs \\"i am dinesh\\" 5 10))\\n  \\n  ;To compare two strings and returns '+' or '0' or '-' \\n  ;if lesser(x<y) or equal(z\=y) or greater (x>y)\\n  (println (compare \\"dinesh\\" \\"Dinesh\\"))\\n  \\n  ;to convert a string to lowercase or uppercase\\n  (println (clojure.string/lower-case \\"DINESH Kumar\\"))\\n  (println (clojure.string/upper-case \\"dinesh Kumar\\"))\\n  \\n  ;to join a list or vector or any other collection\\n  (println (clojure.string/join \\",\\" [0 1 2 4]))\\n  \\n  ;To split based on a regular expression or based on \\\\n or \\\\rn\\n  (println (clojure.string/split \\"I | am |dinesh\\" \#\\"|\\"))\\n  (println (clojure.string/split-lines \\"i am \\\\n dinesh\\" ))\\n  \\n  ;to reverse a string\\n  (println (reverse \\"dinesh\\"))\\n  \\n  ;to replace a string with another\\n  (println (clojure.string/replace \\"i am dinesh\\" \#\\"dinesh\\" \\"kumar\\"))\\n  \\n  ;To trim complete blank spaces or to trim left or right of string\\n  (println (clojure.string/trim \\"  i am dinesh \\"))\\n  (println (clojure.string/triml \\" i am dinesh  \\"))\\n  (println (clojure.string/trimr \\"  i am dinesh   \\")))\\n\\n(stringMethods)" "(defn processLine [dataList]\\n  (def detailsList (clojure.string/split dataList \#\\"\\\\|\\"))\\n  (println detailsList)\\n  (def custMap (hash-map (first detailsList) (hash-map \\"name\\" (nth detailsList 1), \\"address\\" (nth detailsList 2), \\"phone\\" (nth detailsList 3))))\\n  (println custMap))\\n(processLine \\"3|Fan Yuhong|165 Happy Lane|345-4533\\")" "(defn processLine [dataList]\\n  (def detailsList (clojure.string/split dataList \#\\"\\\\|\\"))\\n  (println detailsList)\\n  (def custMap (hash-map (first detailsList) (hash-map \\"name\\" (nth detailsList 1), \\"address\\" (nth detailsList 2), \\"phone\\" (nth detailsList 3))))\\n  (println custMap)\\n  (custMap))\\n(println (processLine \\"3|Fan Yuhong|165 Happy Lane|345-4533\\"))" "(defn processLine [dataList]\\n  (def detailsList (clojure.string/split dataList \#\\"\\\\|\\"))\\n  (println detailsList)\\n  (hash-map (first detailsList) (hash-map \\"name\\" (nth detailsList 1), \\"address\\" (nth detailsList 2), \\"phone\\" (nth detailsList 3))))\\n(println (processLine \\"3|Fan Yuhong|165 Happy Lane|345-4533\\"))" ";method splits a line based on '|' and adds the data in to a hash map\\n(defn processLine [dataList]\\n  (def detailsList (clojure.string/split dataList \#\\"\\\\|\\"))\\n  (println detailsList)\\n  (hash-map (first detailsList) (hash-map \\"name\\" (nth detailsList 1), \\"address\\" (nth detailsList 2), \\"phone\\" (nth detailsList 3))))\\n\\n(defn printData [data]\\n  (def dataList (clojure.string/split-lines data))\\n  (def dataMap (sorted-map {}))\\n  (doseq [item dataList]\\n    (merge-with dataMap (processLine item)))\\n  (println dataMap))\\n\\n(defn mainMethod []\\n  ;definitions of file names\\n  (def custFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/cust.txt\\")\\n  (def prodFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/prod.txt\\")\\n  (def salesFile \\"/Users/dineshkumars/Desktop/eclipse/clojure_workspace/asg2/src/asg2/sales.txt\\")\\n  \\n  ;reads data from various sales files as a string\\n  (def custData (slurp custFile))\\n  (def prodData (slurp prodFile))\\n  (def salesData (slurp salesFile))\\n  (printData custData))\\n\\n(mainMethod)" "(defn printData [data]\\n  (def dataList (clojure.string/split-lines data))\\n  (def dataMap (sorted-map {}))\\n  (doseq [item dataList]\\n    (merge-with dataMap (processLine item)))\\n  (println dataMap)\\"3|Fan Yuhong|165 Happy Lane|345-4533\\\\n1|John Smith|123 Here Street|456-4567\\\\n2|Sue Jones|43 Rose Court Street|345-7867\\")" "(defn printData [data]\\n  (def dataList (clojure.string/split-lines data))\\n  (def dataMap (sorted-map {}))\\n  (doseq [item dataList]\\n    (merge-with dataMap (processLine item)))\\n  (println dataMap))" "(defn printData [data]\\n  (def dataList (clojure.string/split-lines data))\\n  (def dataMap (sorted-map {}))\\n  (doseq [item dataList]\\n    (merge-with dataMap (processLine item)))\\n  (println dataMap))\\n(println dataMap \\"3|Fan Yuhong|165 Happy Lane|345-4533\\\\n1|John Smith|123 Here Street|456-4567\\\\n2|Sue Jones|43 Rose Court Street|345-7867\\")" "(defn processLine [dataList]\\n  (def detailsList (clojure.string/split dataList \#\\"\\\\|\\"))\\n  (hash-map (first detailsList) (hash-map \\"name\\" (nth detailsList 1), \\"address\\" (nth detailsList 2), \\"phone\\" (nth detailsList 3))))\\n\\n(defn printData [data]\\n  (def dataList (clojure.string/split-lines data))\\n  (def dataMap (sorted-map {}))\\n  (doseq [item dataList]\\n    (merge-with dataMap (processLine item)))\\n  (println dataMap))\\n(println dataMap \\"3|Fan Yuhong|165 Happy Lane|345-4533\\\\n1|John Smith|123 Here Street|456-4567\\\\n2|Sue Jones|43 Rose Court Street|345-7867\\")" "(defn processLine [dataList]\\n  (def detailsList (clojure.string/split dataList \#\\"\\\\|\\"))\\n  (hash-map (first detailsList) (hash-map \\"name\\" (nth detailsList 1), \\"address\\" (nth detailsList 2), \\"phone\\" (nth detailsList 3))))\\n\\n(defn printData [data]\\n  (def dataList (clojure.string/split-lines data))\\n  (def dataMap (sorted-map {}))\\n  (doseq [item dataList]\\n    (merge-with dataMap (processLine item)))\\n  (println \\"****\\")\\n  (println dataMap))\\n(println printData \\"3|Fan Yuhong|165 Happy Lane|345-4533\\\\n1|John Smith|123 Here Street|456-4567\\\\n2|Sue Jones|43 Rose Court Street|345-7867\\")" "(defn processLine [dataList]\\n  (def detailsList (clojure.string/split dataList \#\\"\\\\|\\"))\\n  (hash-map (first detailsList) (hash-map \\"name\\" (nth detailsList 1), \\"address\\" (nth detailsList 2), \\"phone\\" (nth detailsList 3))))\\n\\n(defn printData [data]\\n  (def dataList (clojure.string/split-lines data))\\n  (def dataMap (sorted-map {}))\\n  (doseq [item dataList]\\n    (merge dataMap (processLine item)))\\n  (println \\"****\\")\\n  (println dataMap))\\n(def a \= (printData \\"3|Fan Yuhong|165 Happy Lane|345-4533\\\\n1|John Smith|123 Here Street|456-4567\\\\n2|Sue Jones|43 Rose Court Street|345-7867\\"))\\n(println a)" "(defn processLine [dataList]\\n  (def detailsList (clojure.string/split dataList \#\\"\\\\|\\"))\\n  (hash-map (first detailsList) (hash-map \\"name\\" (nth detailsList 1), \\"address\\" (nth detailsList 2), \\"phone\\" (nth detailsList 3))))\\n\\n(defn printData [data]\\n  (def dataList (clojure.string/split-lines data))\\n  (def dataMap (sorted-map {}))\\n  (doseq [item dataList]\\n    (merge dataMap (processLine item)))\\n  (println \\"****\\")\\n  (println dataMap))\\n(def a (printData \\"3|Fan Yuhong|165 Happy Lane|345-4533\\\\n1|John Smith|123 Here Street|456-4567\\\\n2|Sue Jones|43 Rose Court Street|345-7867\\"))\\n(println a)" "(defn processLine [dataList]\\n  (def detailsList (clojure.string/split dataList \#\\"\\\\|\\"))\\n  (hash-map (first detailsList) (hash-map \\"name\\" (nth detailsList 1), \\"address\\" (nth detailsList 2), \\"phone\\" (nth detailsList 3))))\\n\\n(defn printData [data]\\n  (def dataList (clojure.string/split-lines data))\\n  (def dataMap (sorted-map {}))\\n  (doseq [item dataList]\\n    (merge dataMap (processLine item)))\\n  (println \\"****\\")\\n  (println dataMap))\\n(println (printData \\"3|Fan Yuhong|165 Happy Lane|345-4533\\\\n1|John Smith|123 Here Street|456-4567\\\\n2|Sue Jones|43 Rose Court Street|345-7867\\"))" "(defn processLine [dataList]\\n  (def detailsList (clojure.string/split dataList \#\\"\\\\|\\"))\\n  (hash-map (first detailsList) (hash-map \\"name\\" (nth detailsList 1), \\"address\\" (nth detailsList 2), \\"phone\\" (nth detailsList 3))))\\n\\n(defn printData [data]\\n  (def dataList (clojure.string/split-lines data))\\n  (def dataMap (sorted-map \\"\\" \\"\\"))\\n  (doseq [item dataList]\\n    (merge dataMap (processLine item)))\\n  (println \\"****\\")\\n  (println dataMap))\\n(println (printData \\"3|Fan Yuhong|165 Happy Lane|345-4533\\\\n1|John Smith|123 Here Street|456-4567\\\\n2|Sue Jones|43 Rose Court Street|345-7867\\"))" "(def final-map (atom {}))\\n(swap\! final-map assoc \:a \\"a value\\")" "(println final-map)" "(println \:final-value)" "(println -final-map)" "(defn dataList ())" "(defn datalist (list 1))\\n(if (\= ((rest dataList) ()))\\n  (println \\"entered\\")\\n  (println \\"notentered\\"))" "(defn datalist (list 1))\\n(if (\= ((rest dataList) []))\\n  (println \\"entered\\")\\n  (println \\"notentered\\"))" "(defn func []\\n  (defn datalist (list 1))\\n  (if (\= ((rest dataList) []))\\n     (println \\"entered\\")\\n     (println \\"notentered\\")))\\n(func)" "(defn func []\\n  (defn datalist (list 1 2))\\n  (if (\= ((rest dataList) []))\\n    (println \\"entered\\")\\n    (println \\"notentered\\")))\\n(func)" "(defn func []\\n  (def datalist (list 1))\\n  (if (\= ((rest dataList) []))\\n    (println \\"entered\\")\\n    (println \\"notentered\\")))\\n(func)" "(defn func []\\n  (defn dataList (list 1))\\n  (println (rest dataList))\\n  (if (\= ((rest dataList) []))\\n    (println \\"entered\\")\\n    (println \\"notentered\\")))\\n(func)" "(defn func []\\n  (+ 0 0))\\n(def v (func))\\n(println v)" "(define (foo x y)\\n  (if (zero? (mod x y)) x\\n      (sqrt y)\\n  )\\n)"]
eclipse.preferences.version=1
